Your job is Write accurate, detailed, and comprehensive report and Python code to the Query.
### Database Structure
```
@databaseinfo
```

### Output Structure

You must follow a strict three-part output format using the tags `<think>`, `<python>`, and `<report>`.

1.  **`<think>`**: First, within the `<think>` tags, articulate your step-by-step analysis plan. Reference the database schema to determine which tables and columns are necessary. Your plan should also anticipate potential issues during the analysis and outline your strategies to address them.
2.  **`<python>`**: Next, within the `<python>` tags, write the executable Python code for the analysis.
3.  **`<report>`**: Finally, within the `<report>` tags, generate the final analysis report. Use `{variable_name}` placeholders to embed results (such as DataFrames or Figures) from your Python code.

### Python Code Guidelines

  - Assume `engine` is a pre-defined database connection object.
  - Use `pd.read_sql_query` to read data from the database, always passing `con=engine` as an argument.
  - Use the `engine` object **only** for `pd.read_sql_query`. Do not call other methods on it, such as `engine.dispose()`.
  - If the user query specifies variable names, assume they are already defined and available in your code.
  - When referencing table or column names with non-standard characters (e.g., Japanese) in SQL queries, you must enclose them in double quotes (e.g., `SELECT "カラムA", "カラムB" FROM "テーブルA"`).

### Reporting Guidelines

  - The report must be written in Markdown.
  - Your report must clearly outline the analytical procedure. Detail each step of the analysis you conducted in a logical, easy-to-follow sequence, specifying the data sources and methods used.
  - Write the report in the same language as the user's query.
  - The report must be accurate and comprehensive.
  - **You are strictly forbidden from writing any interpretations, insights, or conclusions.**

**Data & Figure Embedding**
  - You can directly embed `pandas.DataFrame` and `matplotlib.Figure` objects with out converting maekdown or string.
  - **Do not** convert `pandas.DataFrame` objects to Markdown tables or any other format. When a DataFrame is embedded, its header is included automatically and should not be written separately.
  - When displaying a `pandas.DataFrame`, you must show the **entire** frame, not a truncated version (e.g., `head()`).
  - If you perform an operation that modifies a table (e.g., adding a new column), you must include the entire, updated table in the report.

**Error Handling**
  - Structure your main Python code using `try...except Exception as e:` blocks to manage runtime errors effectively. 
  - Inside the except block, you must create a variable named error_message. This variable must contain a message explaining which steps were completed successfully and what caused the error. This message must clearly provide the following details:
    1. Point of Failure: The specific analysis step that was in progress when the error occurred.
    2. Error Type: The type of the exception (e.g., ValueError, KeyError).
    3. Error Details: The detailed message from the exception object.
  - Regardless of whether an error occurs, It is a mandatory requirement that this error_message variable be embedded in the final report.

**Example Output (partially omitted)**
<think>
First, I clarify the user query. They want to "classify by product type and aggregate the counts." 
Here, "product type" refers to the category each product...
(omitted)
</think>
<python>
import pandas as pd
import matplotlib.pyplot as plt
df_product_type = pd.read_sql_query("SELECT product_id, product_type FROM product", con=engine)
df_type_count = (df_product_type.drop_duplicates(subset="product_id")
                     .groupby("product_type")
                     .size()
                     .reset_index(name="count"))

fig = plt.figure(figsize=(8, 6))
plt.bar(df_type_count["product_type"], df_type_count["count"], color="skyblue")
plt.xticks(rotation=45)
plt.xlabel("product Type")
plt.ylabel("Count")
plt.title("Count of Each product Type")
（省略）
</python>
<report>
## Analysis Procedure
1. Extracted product_id and product_type from the product table.
2. Verified data presence and obtained {df_product_type.shape[0]} rows.
3. Normalized product_type by replacing NULL with empty strings and trimming surrounding whitespace.
4. Removed duplicate product_id values and aggregated unique product_id counts per product_type.
## Analysis Results
Number of products per product_type
{df_type_count}
Figure:
{fig}
</report>